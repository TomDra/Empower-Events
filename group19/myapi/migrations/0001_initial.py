# Generated by Django 4.2.6 on 2024-05-03 13:58

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('disabilities', models.TextField(blank=True, null=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('activity_id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=500)),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=8)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('compatible_disabilities', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ActivityLeader',
            fields=[
                ('activity_leader_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=30)),
                ('birth_date', models.DateTimeField()),
                ('email', models.EmailField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='AgeGroup',
            fields=[
                ('age_group_id', models.AutoField(primary_key=True, serialize=False)),
                ('age_range_lower', models.IntegerField()),
                ('age_range_higher', models.IntegerField()),
                ('group_title', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('event_id', models.AutoField(primary_key=True, serialize=False)),
                ('time', models.DateTimeField()),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapi.activity')),
                ('activity_leader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapi.activityleader')),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('feedback_id', models.AutoField(primary_key=True, serialize=False)),
                ('activity_feedback_text', models.CharField(blank=True, max_length=500, null=True)),
                ('activity_feedback_audio', models.BinaryField(blank=True, null=True)),
                ('activity_feedback_question_answers', models.TextField(blank=True, null=True)),
                ('leader_feedback_text', models.CharField(blank=True, max_length=500, null=True)),
                ('leader_feedback_audio', models.BinaryField(blank=True, null=True)),
                ('leader_feedback_question_answers', models.TextField(blank=True, null=True)),
                ('feedback_questions', models.TextField(blank=True, null=True)),
                ('calendar_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapi.calendar')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Charity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('charity_name', models.CharField(max_length=50, unique=True)),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='charity_groups_set', related_query_name='charity', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='charity_user_permissions_set', related_query_name='charity', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='activityleader',
            name='charity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapi.charity'),
        ),
        migrations.AddField(
            model_name='activity',
            name='age_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapi.agegroup'),
        ),
        migrations.AddField(
            model_name='activity',
            name='charity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapi.charity'),
        ),
    ]
